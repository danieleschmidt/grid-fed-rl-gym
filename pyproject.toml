[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "grid-fed-rl-gym"
version = "0.1.0"
description = "Digital twin framework for power distribution networks with federated offline reinforcement learning capabilities"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragonlabs.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics"
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "gymnasium>=0.29.0",
    "torch>=2.0.0",
    "matplotlib>=3.5.0",
    "networkx>=2.8.0",
    "pydantic>=2.0.0"
]

[project.optional-dependencies]
solvers = [
    "pandapower>=2.14.0",
    "pypower>=5.1.0"
]
federated = [
    "crypten>=0.4.0",
    "opacus>=1.4.0",
    "flower>=1.8.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0"
]
full = [
    "grid-fed-rl-gym[solvers,federated,dev]"
]

[project.urls]
Homepage = "https://github.com/terragonlabs/grid-fed-rl-gym"
Repository = "https://github.com/terragonlabs/grid-fed-rl-gym"
Issues = "https://github.com/terragonlabs/grid-fed-rl-gym/issues"
Documentation = "https://grid-fed-rl-gym.readthedocs.io"

[project.scripts]
grid-fed-rl = "grid_fed_rl.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["grid_fed_rl*"]

[tool.setuptools.package-data]
grid_fed_rl = ["data/**/*", "configs/**/*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["E501", "F401", "F811"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandapower.*",
    "pypower.*",
    "crypten.*",
    "opacus.*",
    "flower.*"
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["grid_fed_rl"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.bandit]
skips = ["B101", "B601"]
exclude_dirs = ["tests"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''